import sys
import os
import warnings
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
from scipy import stats
from packaging import version
import sklearn
import kagglehub
from data_loader import load_crop_data
from analyze_missing_values import analyze_missing_values
from univariate_analysis import univariate_analysis
from analyze_categorical import analyze_categorical
from correlation_analysis import correlation_analysis
from detect_outliers import detect_outliers

# # Configuraci√≥n de visualizaci√≥n
plt.style.use('seaborn-v0_8-darkgrid')
plt.rcParams['figure.figsize'] = (12, 6)
plt.rcParams['font.size'] = 12
sns.set_palette("husl")

# # Configuraci√≥n de pandas
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', 100)
pd.set_option('display.float_format', '{:.2f}'.format)



# Load crop data using the improved function
crop_data = load_crop_data()

if crop_data is not None:
    print(f"‚úÖ Datos cargados: {crop_data.shape[0]:,} filas √ó {crop_data.shape[1]} columnas")
else:
    print("‚ùå Error cargando los datos")
    sys.exit(1)


print("=" * 80)
print("INFORMACI√ìN GENERAL DEL DATASET".center(80))
print("=" * 80)

# Mostrar primeras filas
print("\nüìã PRIMERAS 5 FILAS:")
print(crop_data.head())

# Informaci√≥n detallada
print("\n" + "=" * 80)
print("ESTRUCTURA DE DATOS".center(80))
print("=" * 80)
crop_data.info()

# Estad√≠sticas descriptivas
print("\n" + "=" * 80)
print("ESTAD√çSTICAS DESCRIPTIVAS".center(80))
print("=" * 80)
print("\nüìä ESTAD√çSTICAS DESCRIPTIVAS:")
print(crop_data.describe().round(2).T)

# Diccionario de metadatos para crop data
print("\n" + "=" * 80)
print("METADATOS DEL DATASET".center(80))
print("=" * 80)

metadata = {
    'Variable': ['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall', 'label'],
    'Tipo': ['Num√©rica', 'Num√©rica', 'Num√©rica', 'Num√©rica', 'Num√©rica', 
             'Num√©rica', 'Num√©rica', 'Categ√≥rica (Target)'],
    'Descripci√≥n': [
        'Contenido de Nitr√≥geno en el suelo (kg/ha)',
        'Contenido de F√≥sforo en el suelo (kg/ha)', 
        'Contenido de Potasio en el suelo (kg/ha)',
        'Temperatura ambiente (¬∞C)',
        'Humedad relativa (%)',
        'Nivel de pH del suelo',
        'Precipitaci√≥n pluvial (mm)',
        'üéØ Tipo de cultivo recomendado'
    ],
    'Valores Faltantes': [
        crop_data['N'].isnull().sum(),
        crop_data['P'].isnull().sum(),
        crop_data['K'].isnull().sum(),
        crop_data['temperature'].isnull().sum(),
        crop_data['humidity'].isnull().sum(),
        crop_data['ph'].isnull().sum(),
        crop_data['rainfall'].isnull().sum(),
        crop_data['label'].isnull().sum()
    ],
    'Rango': [
        f"{crop_data['N'].min():.1f} - {crop_data['N'].max():.1f}",
        f"{crop_data['P'].min():.1f} - {crop_data['P'].max():.1f}",
        f"{crop_data['K'].min():.1f} - {crop_data['K'].max():.1f}",
        f"{crop_data['temperature'].min():.1f} - {crop_data['temperature'].max():.1f}",
        f"{crop_data['humidity'].min():.1f} - {crop_data['humidity'].max():.1f}",
        f"{crop_data['ph'].min():.2f} - {crop_data['ph'].max():.2f}",
        f"{crop_data['rainfall'].min():.1f} - {crop_data['rainfall'].max():.1f}",
        f"{crop_data['label'].nunique()} categor√≠as √∫nicas"
    ]
}

df_metadata = pd.DataFrame(metadata)

# Mostrar metadata con formato mejorado
print("\nüìã INFORMACI√ìN DETALLADA DE VARIABLES:")
print(df_metadata.to_string(index=False))

# Informaci√≥n adicional sobre las categor√≠as del target
print("\n" + "=" * 80)
print("AN√ÅLISIS DEL TARGET (LABEL)".center(80))
print("=" * 80)

print(f"\nüå± TIPOS DE CULTIVOS DISPONIBLES ({crop_data['label'].nunique()} categor√≠as):")
crop_counts = crop_data['label'].value_counts()
for i, (crop, count) in enumerate(crop_counts.items(), 1):
    percentage = (count / len(crop_data)) * 100
    print(f"{i:2d}. {crop:<15} - {count:4d} muestras ({percentage:5.1f}%)")

print(f"\nüìä DISTRIBUCI√ìN:")
print(f"   ‚Ä¢ Cultivo m√°s com√∫n: {crop_counts.index[0]} ({crop_counts.iloc[0]} muestras)")
print(f"   ‚Ä¢ Cultivo menos com√∫n: {crop_counts.index[-1]} ({crop_counts.iloc[-1]} muestras)")
print(f"   ‚Ä¢ Ratio m√°ximo/m√≠nimo: {crop_counts.iloc[0]/crop_counts.iloc[-1]:.1f}x")

missing_analysis = analyze_missing_values(crop_data)
if missing_analysis is not None:
    print(missing_analysis)

for col in ['rainfall', 'humidity', 'temperature']:
    univariate_analysis(crop_data, col, 'temperature')

analyze_categorical(crop_data, 'label', 'temperature')

correlation_analysis(crop_data)

from statsmodels.stats.outliers_influence import variance_inflation_factor
import pandas as pd

X = crop_data[['N','P','K','temperature','humidity','ph','rainfall']].dropna()
vif = pd.DataFrame({
    'feature': X.columns,
    'VIF': [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]
})
print(vif.sort_values('VIF', ascending=False))

from sklearn.feature_selection import mutual_info_classif
X = crop_data[['N','P','K','temperature','humidity','ph','rainfall']]
y = crop_data['label']  # tu etiqueta de cultivo
mi = mutual_info_classif(X, y, discrete_features=False, random_state=42)
print(pd.Series(mi, index=X.columns).sort_values(ascending=False))


outliers_iqr, outliers_zscore, outliers_iso = detect_outliers(crop_data)